name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:latest
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest-cov pytest-xdist
    
    - name: Run backend tests
      env:
        FLASK_ENV: testing
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
      run: |
        cd backend
        pytest tests/ -v -n auto --cov=app --cov-report=xml
    
    - name: Upload coverage
      uses: actions/upload-artifact@v3
      with:
        name: backend-coverage-${{ matrix.python-version }}
        path: backend/coverage.xml

  frontend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: frontend
      run: npm ci
    
    - name: Run frontend unit tests
      working-directory: frontend
      run: npm test -- --coverage --maxWorkers=2
    
    - name: Upload coverage
      uses: actions/upload-artifact@v3
      with:
        name: frontend-coverage-${{ matrix.node-version }}
        path: frontend/coverage

  e2e-tests:
    needs: [backend-tests, frontend-tests]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        containers: [1, 2, 3, 4] # Split tests across 4 containers

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        npm ci
        cd frontend && npm ci
        cd ../backend && pip install -r requirements.txt
    
    - name: Start backend server
      env:
        FLASK_ENV: testing
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      run: |
        cd backend
        flask run &
        sleep 5
    
    - name: Start frontend
      run: |
        cd frontend
        npm run build
        npm run preview &
        sleep 5
    
    - name: Run Cypress tests
      uses: cypress-io/github-action@v5
      with:
        command: npx cypress run --record --parallel --group "e2e-tests"
        working-directory: .
        wait-on: "http://localhost:5173"
        browser: chrome
      env:
        CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SPLIT: ${{ strategy.job-total }}
        SPLIT_INDEX: ${{ strategy.job-index }}

  deploy-preview:
    needs: e2e-tests
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Create deployment status
      uses: actions/github-script@v6
      with:
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'preview',
            auto_merge: false
          });
    
    - name: Generate test report
      run: |
        echo "Generating comprehensive test report..."
        # Add report generation logic here

    - name: Comment PR with test results
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const { issue: { number: issue_number }, repo: { owner, repo } } = context;
          const testResults = `
          # Test Results Summary
          
          ## Backend Tests
          - Python versions tested: 3.9, 3.10, 3.11
          - Coverage report available in artifacts
          
          ## Frontend Tests
          - Node versions tested: 16.x, 18.x, 20.x
          - Coverage report available in artifacts
          
          ## E2E Tests
          - All critical user flows validated
          - Performance benchmarks checked
          `;
          
          github.rest.issues.createComment({
            issue_number,
            owner,
            repo,
            body: testResults
          });